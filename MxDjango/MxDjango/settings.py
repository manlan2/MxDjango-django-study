# _*_ coding:utf-8 _*_
"""
Django settings for MxDjango project.
Generated by 'django-admin startproject' using Django 1.9.8.
For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 设置 apps目录
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%uv4n$9eib4k$x62fvdhe-0jf1+kfr1%dw1yej8q&-knv7ba$)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = [*]
# ---------------------------------
# DEBUG = False
#
# ALLOWED_HOSTS = ['*']


# Application definition

# AUTH 方法（支持邮箱登录）通过邮箱登陆
AUTHENTICATION_BACKENDS = (
    'users.views.CustomBackend',
)

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',            # 拦截request，找到session_id,到数据包diango_session中查询到user并取出
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'course',
    'operation',
    'organization',
    'xadmin',
    'crispy_forms',
    'captcha',
    'pure_pagination',  # 用于分页的库
    'DjangoUeditor',
]

# UserProfile 覆盖了 django 内置的 user 表
AUTH_USER_MODEL = 'users.UserProfile'    # 自定义用户【class UserProfile(AbstractUser)】

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MxDjango.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],        # 设置  templates 目录
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                # 配置了这个之后，就会把最底下的MEDIA_URL注册到 html ，这样 html 就能用 MEDIA_URL 变量
                'django.contrib.messages.context_processors.messages',              # 用于将MEDIA_URL注册到HTML中,本例用于显示图片
                # 这个配置media问件【from MxDjango.settings import MEDIA_ROOT】
                # url(r'^media/(?P<path>.*)$', serve, {'document_root': MEDIA_ROOT}),
                # <img width="200" height="120" class="scrollLoading" data-url="{{ MEDIA_URL }}{{ org.image }}"/>
                'django.core.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'MxDjango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

# 部署时的数据库配置，请和  docker-compose 里的配置保持一致
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mxonline',
        'USER': 'root',
        'PASSWORD': 'mysql',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'zh-hans'         # Django1.7及之前用zh-cn?

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False                  # 数据库取本地时间


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

# STATICFILES_DIRS = [            # DEBUG = False时失效
#     os.path.join(BASE_DIR, 'static'),
# ]

#配置邮箱发送者
EMAIL_HOST = 'smtp.sina.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'zhao15779455101@sina.com'
EMAIL_HOST_PASSWORD = 'ZHAO15779455101'
EMAIL_USE_TLS = False
EMAIL_FROM = 'zhao15779455101@sina.com'

MEDIA_URL = '/media/'                                 # 文件上传目录
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')          # 文件上传地址

# 当运行 python manage.py collectstatic 的时候
# STATIC_ROOT 文件夹 是用来将所有 STATICFILES_DIRS 中所有文件夹中的文件，以及各 app 中 static 中的文件都复制过来
# 把这些文件放到一起是为了用 apache/nginx 等部署的时候更方便
STATIC_ROOT = os.path.join(BASE_DIR, 'static')        # 文件上传地址(当debug改为Fales时需要)
